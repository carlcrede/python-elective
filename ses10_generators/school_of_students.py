"""
In this exercise you start out by having a list of names, and a list of majors.

Your job is to create:

A list of dictionaries of students (ie: students = [{‘id’: 1,’name’: ‘Claus’, ‘major’: ‘Math’}]), 
cretated in a normal function that returns the resul.

A Generator that “returns” a generator object. So the student is yield instead of returned.

Both functions should do the same, but one returns a list and one a generator object.

students = [{‘id’: 1,’name’: ‘Clasu’, ‘major’: ‘Math’}]
The id could be generated by a counter or like in a loop.
The Name should be found by randomly chosing a name from the names list
The Major should be found by randomly chosing a major from the major list
"""

import random as r
import time as t

def time(func):
    def wrapper(*args, **kwargs):
        start = t.time()
        value = func(*args, **kwargs)
        end = t.time()
        print(f'Time to execute function "{func.__name__}": {end - start}')
        return value
    return wrapper

names = ['John', 'Corey', 'Adam', 'Steve', 'Rick', 'Thomas']
majors = ['Math', 'Engineering', 'CompSci', 'Arts', 'Business']

@time
def students_list(num_students):
    # Using List comprehension
    students = [ {'id': i + 1, 
                'name': (names[r.randint(0, len(names) - 1)]),
                'major': (majors[r.randint(0, len(majors) - 1)])}
                for i in range(0, num_students) ]
    return students

@time
def students_generator(num_students):
    # Using generator function with loop (with yield)  -- also using dict comprehension
    for i in range (0, num_students):
        student = {'id': i + 1,
                'name': (names[r.randint(0, len(names) - 1)]),
                'major': (majors[r.randint(0, len(majors) - 1)]) }
        yield student
        

    # Using generator expression  --  dict comprehension
    """ students = ( {'id': i + 1, 
                'name': (names[r.randint(0, len(names) - 1)]),
                'major': (majors[r.randint(0, len(majors) - 1)])}
                for i in range(0, num_students) )
    return students """


# Function calls
people1 = students_list(1000000)
people2 = students_generator(1000000)


# timing speaks for itself